@use "sass:map";
@use "./typography.scss";
@use "./utils.scss";
@use "./colors.scss";
@use "./states.scss";

@mixin mtu-button($padding: 0 24px) {
	@include typography.md-sys-typescale-label-large;
	appearance: none;
	border: none;
	height: 40px;
	border-radius: 20px;
	padding: $padding;

	&:not(:disabled) {
		cursor: pointer;
	}
}

@mixin mtu-button-icon {
	display: inline-flex;
	align-items: center;
	justify-content: center;
	vertical-align: middle;
	text-align: center;
	font-size: utils.rem(24px);
	width: utils.rem(18px);
	height: utils.rem(18px);
}

.mtu-elevated-button {
	$variant: "primary";
	@include mtu-button;

	@include colors.themeify {
		background: colors.themed("surface");
		box-shadow: colors.themed("shadow-1");
		color: colors.themed("primary");

		&:disabled {
			background: rgba(
				colors.themed("on-surface"),
				map.get(states.$stateLayerOpacity, "disabled")
			);
			box-shadow: none;

			color: rgba(
				colors.themed("on-surface"),
				map.get(states.$stateLayerOpacity, "disabled-content")
			);
		}

		&:hover:not(:disabled) {
			background: colors.overlay(
				rgba(
					colors.themed($variant),
					map.get(states.$stateLayerOpacity, "hover")
				),
				colors.themed("surface")
			);
			box-shadow: colors.themed("shadow-2");
		}

		&:active:not(:disabled),
		&:focus-visible:not(:disabled) {
			box-shadow: colors.themed("shadow-1");
			background: colors.overlay(
				rgba(
					colors.themed($variant),
					map.get(states.$stateLayerOpacity, "active")
				),
				colors.themed("surface")
			);
		}
	}

	& > .mtu-icon {
		@include mtu-button-icon;
		transform: translateX(-8px);
		margin-right: 2px;
		margin-left: 2px;
	}
}

.mtu-filled-button {
	$variant: "primary";
	@include mtu-button;

	@include colors.themeify {
		background: colors.themed($variant);
		color: colors.themed("on-#{$variant}");

		&:disabled {
			background: rgba(
				colors.themed("on-surface"),
				map.get(states.$stateLayerOpacity, "disabled")
			);
			color: rgba(
				colors.themed("on-surface"),
				map.get(states.$stateLayerOpacity, "disabled-content")
			);
		}

		&:hover:not(:disabled) {
			box-shadow: colors.themed("shadow-1");

			background: colors.overlay(
				rgba(
					colors.themed("on-#{$variant}"),
					map.get(states.$stateLayerOpacity, "hover")
				),
				colors.themed($variant)
			);
		}

		&:active:not(:disabled),
		&:focus-visible:not(:disabled) {
			box-shadow: none;
			background: colors.overlay(
				rgba(
					colors.themed("on-#{$variant}"),
					map.get(states.$stateLayerOpacity, "active")
				),
				colors.themed($variant)
			);
		}
	}

	& > .mtu-icon {
		@include mtu-button-icon;
		transform: translateX(-8px);
		margin-right: 2px;
		margin-left: 2px;
	}
}

.mtu-filled-tonal-button {
	$variant: "secondary-container";
	@include mtu-button;

	@include colors.themeify {
		background: colors.themed($variant);
		color: colors.themed("on-#{$variant}");

		& > .mtu-icon {
			@include mtu-button-icon;
			transform: translateX(-8px);
			margin-right: 2px;
			margin-left: 2px;
		}

		&:not(:hover, :active, :focus-visible, :disabled) {
			& > .mtu-icon {
				color: colors.themed("secondary");
			}
		}

		&:disabled {
			background: rgba(
				colors.themed("on-surface"),
				map.get(states.$stateLayerOpacity, "disabled")
			);
			color: rgba(
				colors.themed("on-surface"),
				map.get(states.$stateLayerOpacity, "disabled-content")
			);
		}

		&:hover:not(:disabled) {
			box-shadow: colors.themed("shadow-1");

			background: colors.overlay(
				rgba(
					colors.themed("on-#{$variant}"),
					map.get(states.$stateLayerOpacity, "hover")
				),
				colors.themed($variant)
			);
		}

		&:active:not(:disabled),
		&:focus-visible:not(:disabled) {
			box-shadow: none;
			background: colors.overlay(
				rgba(
					colors.themed("on-#{$variant}"),
					map.get(states.$stateLayerOpacity, "active")
				),
				colors.themed($variant)
			);
		}
	}
}

@mixin mtu-outlined-button($with-background: false) {
	$variant: "primary";
	@include mtu-button;

	@include colors.themeify {
		@if ($with-background) {
			background: colors.themed("surface");
		} @else {
			background: transparent;
		}

		outline: 1px solid colors.themed("outline");
		color: colors.themed($variant);

		&:disabled {
			@if ($with-background) {
				background: transparent;
			}

			color: rgba(
				colors.themed("on-surface"),
				map.get(states.$stateLayerOpacity, "disabled-content")
			);

			outline: 1px solid
				rgba(
					colors.themed("on-surface"),
					map.get(states.$stateLayerOpacity, "disabled-content")
				);
		}

		&:hover:not(:disabled) {
			$bg-color: transparent;

			@if ($with-background) {
				$bg-color: colors.themed("surface");
			}

			background: colors.overlay(
				rgba(
					colors.themed($variant),
					map.get(states.$stateLayerOpacity, "hover")
				),
				$bg-color
			);
		}

		&:active:not(:disabled),
		&:focus-visible:not(:disabled) {
			outline: 1px solid colors.themed($variant);

			$bg-color: transparent;

			@if ($with-background) {
				$bg-color: colors.themed("surface");
			}

			background: colors.overlay(
				rgba(
					colors.themed($variant),
					map.get(states.$stateLayerOpacity, "active")
				),
				$bg-color
			);
		}
	}

	& > .mtu-icon {
		@include mtu-button-icon;
		transform: translateX(-8px);
		margin-right: 2px;
		margin-left: 2px;
	}
}

.mtu-outlined-button {
	@include mtu-outlined-button();
}

.mtu-outlined-button-background {
	@include mtu-outlined-button(true);
}

@mixin mtu-text-button($has-icon: false) {
	$variant: "primary";
	@include mtu-button(0 16px);

	@include colors.themeify {
		background: transparent;
		color: colors.themed($variant);

		&:disabled {
			color: rgba(
				colors.themed("on-surface"),
				map.get(states.$stateLayerOpacity, "disabled-content")
			);
		}

		&:hover:not(:disabled) {
			background: colors.overlay(
				rgba(
					colors.themed($variant),
					map.get(states.$stateLayerOpacity, "hover")
				),
				transparent
			);
		}

		&:active:not(:disabled),
		&:focus-visible:not(:disabled) {
			background: colors.overlay(
				rgba(
					colors.themed($variant),
					map.get(states.$stateLayerOpacity, "active")
				),
				transparent
			);
		}
	}

	@if ($has-icon) {
		& > .mtu-icon {
			@include mtu-button-icon;
			margin-right: 8px;
		}
	}
}

.mtu-text-button {
	@include mtu-text-button();
}

.mtu-text-button-icon {
	@include mtu-text-button(true);
}
